---
title: "Modelli per Cogne - 08/02/19"
output: html_notebook
---

Carico i pacchetti per le analisi:

```{r packages}
# install.packages("unmarked")
library(unmarked)
require(stats4)
require(parallel)
# library(CircStats)
# library(circular)
library(ggcorrplot)
library(ggplot2)
```

Leggo il file umf (creato con '01_data_prep_occupancy_cogne.R')

```{r data-umf}
load("output/umf_cogne.RData")
summary(umf)
```

Ora fitto i primi modelli sulla base degli esempi contenuti in colext_EXAMPLES.pdf.
Here, we show the output of the null model and of the base models with the number of species or the vegetation (1/8) as explanatory variable (as they cannot be included in the same model because of correlation). Then, we continue by simplifying the base models (output not shown).

```{r models}
# obs.covs.temp <- obsCovs(umf)
# obs.covs.temp$temp <- as.numeric(obs.covs.temp$temp)
# summary(as.numeric(as.character(obs.covs.temp$temp)))
# obs.covs.temp$rain <- as.numeric(obs.covs.temp$rain)
# obsCovs(umf) <- obs.covs.temp
# site.covs.temp <- siteCovs(umf)
# site.covs.temp$ottavi_veg <- as.numeric(site.covs.temp$ottavi_veg)-1
# summary(site.covs.temp$ottavi_veg)
# siteCovs(umf) <- site.covs.temp
# modello nullo
m0 <- colext(psiformula= ~1,
             gammaformula = ~ 1,
             epsilonformula = ~ 1,
             pformula = ~ 1,
             data = umf, method="BFGS")
summary(m0)

# base model with n_species
m1 <- colext(psiformula= ~ MDR + I(MDR^2) + IQR + Esp.tr + I(Esp.tr^2) + slope_degr + n_species + I(n_species^2) + dominante,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
summary(m1)

# base model with ottavi_veg
m1b <- colext(psiformula= ~ MDR + I(MDR^2) + IQR + Esp.tr + I(Esp.tr^2) + slope_degr + ottavi_veg + dominante,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
summary(m1b)


m2 <- colext(psiformula= ~ MDR + I(MDR^2) + IQR + Esp.tr + I(Esp.tr^2) + slope_degr + n_species + I(n_species^2),
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m2)

m2b <- colext(psiformula= ~ MDR + I(MDR^2) + IQR + Esp.tr + I(Esp.tr^2) + slope_degr + ottavi_veg,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m2b)


m3 <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + I(Esp.tr^2) + slope_degr + n_species + I(n_species^2),
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m3)

m3b <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + I(Esp.tr^2) + slope_degr + ottavi_veg,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m3b)

m4 <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + I(Esp.tr^2) + n_species + I(n_species^2),
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m4)

m4b <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + I(Esp.tr^2) + ottavi_veg,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m4b)

m5 <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + n_species + I(n_species^2),
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m5)

m5b <- colext(psiformula= ~ MDR + I(MDR^2) + Esp.tr + ottavi_veg + I(n_species^2),
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m5b)


m6 <- colext(psiformula= ~ MDR + n_species + Esp.tr,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m6)

m6b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
             gammaformula = ~ factor(year)*factor(season) + time.interval -1,
             epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
             pformula = ~ alba + temp + rain + season + MDR,
             data = umf, method="BFGS")
# summary(m6b)

m7 <- colext(psiformula= ~ MDR + I(MDR^2) + n_species + Esp.tr,
              gammaformula = ~ factor(year)*factor(season) + time.interval -1,
              epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
              pformula = ~ alba + temp + rain + season + MDR,
              data = umf, method="BFGS")
# summary(m7)

m7b <- colext(psiformula= ~ MDR + I(MDR^2) + ottavi_veg + Esp.tr,
              gammaformula = ~ factor(year)*factor(season) + time.interval -1,
              epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
              pformula = ~ alba + temp + rain + season + MDR,
              data = umf, method="BFGS")
# summary(m7b)

# m8 <- colext(psiformula= ~ n_species + Esp.tr,
#               gammaformula = ~ factor(year)*factor(season) + time.interval -1,
#               epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
#               pformula = ~ alba + temp + rain + season + MDR,
#               data = umf, method="BFGS")
# summary(m8)
# 
# m8b <- colext(psiformula= ~ perc_veg + Esp.tr,
#              gammaformula = ~ factor(year)*factor(season) + time.interval -1,
#              epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
#              pformula = ~ alba + temp + rain + season + MDR,
#              data = umf, method="BFGS")
# summary(m8b)
# 
# m9 <- colext(psiformula= ~ Esp.tr,
#               gammaformula = ~ factor(year)*factor(season) + time.interval -1,
#               epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
#               pformula = ~ alba + temp + rain + season + MDR,
#               data = umf, method="BFGS")
# summary(m9)
# 
# m9b <- m9
```

Faccio un confronto di questi primi modelli in termini di AIC:

```{r models-table}
# procedura di model selection
fmList <- fitList(m0, m1, m1b, m2, m2b, m3, m3b, m4, m4b, m5, m5b, m6, m6b, m7, m7b)
modSel(fmList)
# # solo modelli con numero di specie
# fmList_n_species <- fitList(m0, m1, m2, m3, m4, m5, m6)
# modSel(fmList_n_species)
# # solo modelli con vegetazione in ottavi
# fmList_ottavi_veg <- fitList(m0, m1b, m2b, m3b, m4b, m5b, m6b)
# modSel(fmList_ottavi_veg)
```

Model m6(b) is clearly outperforming the others. Scelgo il modello con gli ottavi della vegetazione perché sono più facili da misurare rispetto al numero di specie. 
Adesso provo a semplificare la struttura della detection, e quindi di colonization ed extinction:

```{r simplified-models-detection}
# parto da modello m6b (AIC: 1945.927)
# che aveva pformula = ~alba + temp + rain + season + MDR
m6b.moddetection1 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + season,
                           data = umf, method="BFGS")
# summary(m6b.moddetection1)

m6b.moddetection2 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + temp + season,
                           data = umf, method="BFGS")

m6b.moddetection3 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + rain + season,
                           data = umf, method="BFGS")

m6b.moddetection4 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + temp + rain + season,
                           data = umf, method="BFGS")

m6b.moddetection5 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + MDR + season,
                           data = umf, method="BFGS")

m6b.moddetection6 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + temp + MDR + season,
                           data = umf, method="BFGS")

m6b.moddetection7 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                           gammaformula = ~ factor(year)*factor(season) + time.interval -1,
                           epsilonformula = ~ factor(year)*factor(season) + time.interval -1,
                           pformula = ~ alba + rain + MDR + season,
                           data = umf, method="BFGS")
```

```{r simplified-models-detection-table}
# procedura di model selection
fmList <- fitList(m6b, m6b.moddetection1, m6b.moddetection2,
                  m6b.moddetection3, m6b.moddetection4, m6b.moddetection5,
                  m6b.moddetection6, m6b.moddetection7)
modSel(fmList)
```

NB. Potrebbe essere interessante poi vedere nel dettaglio anche cosa viene fuori usando la struttura 'alba + MDR + season' per pformula  - aggiunto chunk!!!

A questo punto semplifico gamma ed epsilon:

```{r simplified-models-gamma-epsilon}
# semplifico gamma ed epsilon usando  pformula = ~ alba + temp + season
m6b.moddetection.mod1 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + factor(season) + time.interval -1,
                               epsilonformula = ~ factor(year) + factor(season) + time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")
# summary(m6b.moddetection.mod1)

m6b.moddetection.mod2 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + time.interval -1,
                               epsilonformula = ~ factor(year) + time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod3 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(season) + time.interval -1,
                               epsilonformula = ~ factor(season) + time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod4 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ time.interval -1,
                               epsilonformula = ~ time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod5 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(season) + time.interval -1,
                               epsilonformula = ~ factor(year) + time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod6 <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + time.interval -1,
                               epsilonformula = ~ factor(season) + time.interval -1,
                               pformula = ~ alba + temp + season,
                               data = umf, method="BFGS")
# ~ factor(year) + factor(season) + time.interval -1 (AIC: 1926.131) 
# ~ factor(year) + time.interval -1 (AIC: 1922.156)
# ~ factor(season) + time.interval -1 (AIC: 1918.116)
# ~ time.interval -1 (AIC: 1939.593)
#
# scelgo ~ factor(season) + time.interval -1 (AIC: 1918.116)
```

```{r simplified-models-gamma-epsilon2}
# semplifico gamma ed epsilon usando  pformula = ~ alba + MDR + season
m6b.moddetection.mod1b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + factor(season) + time.interval -1,
                               epsilonformula = ~ factor(year) + factor(season) + time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")
# summary(m6b.moddetection.mod1)

m6b.moddetection.mod2b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + time.interval -1,
                               epsilonformula = ~ factor(year) + time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod3b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(season) + time.interval -1,
                               epsilonformula = ~ factor(season) + time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod4b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ time.interval -1,
                               epsilonformula = ~ time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod5b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(season) + time.interval -1,
                               epsilonformula = ~ factor(year) + time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")

m6b.moddetection.mod6b <- colext(psiformula= ~ MDR + ottavi_veg + Esp.tr,
                               gammaformula = ~ factor(year) + time.interval -1,
                               epsilonformula = ~ factor(season) + time.interval -1,
                               pformula = ~ alba + MDR + season,
                               data = umf, method="BFGS")
```



Confronto tra di loro gli ultimi modelli:

```{r simplified-models-table}
# procedura di model selection
fmList <- fitList(m6b, # modello selezionato per struttura occupancy (psi)
                  # modelli modificati per detection (p):
                  m6b.moddetection1, m6b.moddetection2,
                  m6b.moddetection3, m6b.moddetection4, m6b.moddetection5,
                  m6b.moddetection6, m6b.moddetection7,
                  # modelli modificati per gamma ed epsilon:
                  m6b.moddetection.mod1, m6b.moddetection.mod2,
                  m6b.moddetection.mod3, m6b.moddetection.mod4, 
                  m6b.moddetection.mod5, m6b.moddetection.mod6,
                  # altri modelli modificati per gamma ed epsilon:
                  m6b.moddetection.mod1b, m6b.moddetection.mod2b,
                  m6b.moddetection.mod3b, m6b.moddetection.mod4b, 
                  m6b.moddetection.mod5b, m6b.moddetection.mod6b)
modSel(fmList)
```

<!-- E procedo ora a confrontare i modelli fittati: -->

```{r ALL-models-table, eval=FALSE, include=FALSE}
# solo modelli con vegetazione in ottavi
fmList_ottavi_veg <- fitList(m0, m1b, m2b, m3b, m4b, m5b, m6b, m6b.moddetection, m6b.moddetection.mod)
modSel(fmList_ottavi_veg)
```

In conclusione, decido di usare il modello 'm6b.moddetection.mod3'.

**NB. Verificare come sono stati calcolati i limiti inferiore e superiore!!**

Faccio i grafici che mostrano come psi (occupancy) varia al variare delle covariate ambientali:

```{r plots-siteCovs-psi}
m6b.moddetection.mod <- m6b.moddetection.mod3
# psi (logit scale) diminuisce all'aumentare del diametro delle rocce
# MDR NEL NOSTRO DATASET VA DA 28 A 212
nd <- data.frame(MDR=seq(0, 200, length=50), ottavi_veg=rep(3,50), Esp.tr=rep(0,50))
E.psi <- predict(m6b.moddetection.mod, type="psi", newdata=nd, appendData=TRUE)
qplot(MDR, Predicted, data = E.psi, geom = "line",
      xlab = "Diametro delle rocce (mediana, cm)", ylab = expression(hat(psi))) +
  geom_ribbon(aes(x = MDR, ymin = lower, ymax = upper), alpha = 0.1) +
  scale_y_continuous(limits=c(0, 1)) +
  theme_light()

# psi (logit scale) diminuisce all'aumentare della percentuale di vegetazione
# PERC_VEG NEL NOSTRO DATASET VA DA 0 A 80
nd <- data.frame(MDR=rep(67,50), ottavi_veg=seq(0, 8, length=50), Esp.tr=rep(0,50))
E.psi <- predict(m6b.moddetection.mod, type="psi", newdata=nd, appendData=TRUE)
qplot(ottavi_veg, Predicted, data = E.psi, geom = "line",
      xlab = "% copertura erbacea", ylab = expression(hat(psi))) +
  geom_ribbon(aes(x = ottavi_veg, ymin = lower, ymax = upper), alpha = 0.1) +
  scale_y_continuous(limits=c(0, 1)) +
  theme_light()

# psi (logit scale) aumenta all'aumentare dell'esposizione (andando verso sud)
# ESP.TR NEL NOSTRO DATASET VA DA -126 A 62
nd <- data.frame(MDR=rep(67,50), ottavi_veg=rep(3,50), Esp.tr=seq(-135, 90, length=50))
E.psi <- predict(m6b.moddetection.mod, type="psi", newdata=nd, appendData=TRUE)
qplot(Esp.tr, Predicted, data = E.psi, geom = "line",
      xlab = "Esposizione", ylab = expression(hat(psi))) +
  geom_ribbon(aes(x = Esp.tr, ymin = lower, ymax = upper), alpha = 0.1) +
  scale_x_continuous(limits=c(-130, 70), breaks=c(-135,-90,-45,0,45,90), labels=c("SO","O","NO","N","NE","E")) +
  theme_light()
# PER LA TRASFORMAZIONE DELL'ESPOSIZIONE CHE ABBIAMO FATTO, I VALORI ATTORNO ALLO 0
# (DA -45 A +45 CORRISPONDONO AD ESPOSIZIONI NORD), MENTRE IL VALORE -100 CORRISPONDE ALL'ESPOSIZIONE OVEST
# (PIù PRECISAMENTE OVEST SAREBBE = -90); +90 è EST; 180 è SUD, MA NEL NOSTRO DATASET NON è PRESENTE
```

Ora visualizzo invece come varia la probabilità di cattura a seconda di alba/tramonto e della stagione:

```{r plots-obsCovs-p}
# DETECTION PLOT
# detection (logit scale)
nd <- data.frame(alba=c("A","A","Tr","Tr"),
                 season=c("luglio","sett","luglio","sett"),
                 temp=rep(11.71, 4))
E.psi <- predict(m6b.moddetection.mod, type="det", newdata=nd, appendData=TRUE)
ggplot(E.psi, aes(x=season, y=Predicted, colour=alba, group=alba)) + 
  geom_errorbar(aes(ymin=lower, ymax=upper), colour="black", width=.1) + #, position=Predicted) +
  #geom_line(position=pd) +
  geom_line(aes(group = alba)) +
  #geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
  geom_point(size=3, shape=21, fill="white") + # 21 is filled circle
  xlab("Mese") +
  #ylab(expression(hat(p))) +
  ylab("Probabilita' di cattura") + 
  scale_colour_hue(name="Occasione di cattura",    # Legend label, use darker colors
                   breaks=c("A", "Tr"),
                   labels=c("Alba", "Tramonto"),
                   l=40) +                    # Use darker colors, lightness=40
  #ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
  expand_limits(y=0) +                        # Expand y range
  #scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
  theme_light() +
  theme(legend.justification=c(1,0),
        legend.position=c(0.35,0.70))               # Position legend in bottom right
```



```{r}
# DETECTION PLOT
# detection (logit scale) aumenta all'aumentare dell'esposizione (andando verso sud)
nd <- data.frame(alba=rep(c(rep("A",50),rep("Tr",50)),2),
                 season=c(rep("luglio",50),rep("sett",100),rep("luglio",50)),
                 temp=rep(seq(0,20,length=50),4))
E.psi <- predict(m6b.moddetection.mod, type="det", newdata=nd, appendData=TRUE)
E.psi$fattore <- paste(nd$alba,"-",nd$season)
# personalizzare i colori
ggplot(E.psi, aes(x=temp, y=Predicted, group=fattore)) +
  geom_line(aes(linetype=fattore, color=fattore))+
  # geom_point()+
  scale_linetype_manual(name = "Occasione di cattura", values=c("dashed", "solid","dashed", "solid"))+
  scale_color_manual(name = "Occasione di cattura", values=c("red", "red", "#56B4E9", "#56B4E9"))+
  # scale_size_manual(values=c(1, 1.5))+
  # theme(legend.position="top")
  expand_limits(y=0) +                        # Expand y range
  #scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
  xlab("Temperatura") +
  #ylab(expression(hat(p))) +
  ylab("Probabilita' di cattura") + 
  # scale_colour_hue(name="Occasione di cattura", l=40) +    # Legend label, use darker colors
  theme_light() +
  theme(legend.justification=c(1,0),
        legend.position=c(0.33,0.60)) +
  geom_ribbon(aes(x = temp, ymin = lower, ymax = upper), alpha = 0.1)



```


In ultimo, uso il modello selezionato per calcolare psi nelle diverse sessioni:

```{r plots-sessioni-psi}
## get the trajectory estimates
smoothed(m6b.moddetection.mod)
#               1         2         3         4         5        6
# unoccupied 0.5553385 0.2913782 0.2817329 0.2731215 0.2074122 0.370676
# occupied   0.4446615 0.7086218 0.7182671 0.7268785 0.7925878 0.629324
# ho fatto anche modelli separati per settembre e le stime coincidono abbastanza, quindi ok, ho usato bene il time interval!
projected(m6b.moddetection.mod) # OK!!!
#             1         2         3        4         5         6
# unoccupied 0.5562806 0.2986376 0.2920525 0.292125 0.2306886 0.3707592
# occupied   0.4437194 0.7013624 0.7079475 0.707875 0.7693114 0.6292408
## Find bootstrap standard errors for smoothed trajectory
fm <- nonparboot(m6b.moddetection.mod, B = 100)  # This takes a while!
fm@smoothed.mean.bsse
fm@projected.mean.bsse

sessioni <- rep(c("luglio","settembre"),5)
psi.plot <- data.frame(year=c(2014,2014,2015,2015,2016,2016,2017,2017,2018,2018), 
                       sessioni=sessioni, 
                       modes=c(NA,projected(m6b.moddetection.mod)[2,1:5],NA,projected(m6b.moddetection.mod)[2,6:8]),
                       bsse=c(NA,fm@projected.mean.bsse[2,1:5],NA,fm@projected.mean.bsse[2,6:8]))

ggplot(psi.plot, aes(x=sessioni, y=modes)) + 
  geom_errorbar(aes(ymin=modes-bsse, ymax=modes+bsse), colour="black", width=.1) +
  geom_point(size=3, shape=21, fill="white", colour="dark red", stroke=1) +
  # scale_x_date(date_labels = sessioni) +
  facet_wrap(~year, nrow=1, shrink = TRUE) +
  # scale_x_continuous(limits=c(1, 2), breaks=c(1,2))+#, labels=c("luglio","settembre")) +
  scale_y_continuous(limits=c(0, 1)) +
  xlab("Sessione") +
  ylab(expression(hat(psi))) +
  theme_light()
```

```{r}
psi.plot
```




e per calcolare anche la proporzione di siti occupati:

```{r plots-sessioni-pao}
# Empirical Bayes estimates of number of sites occupied in each year
re <- ranef(m6b.moddetection.mod)
modes <- colSums(bup(re, stat="mode"))
modes.dates <- c(NA,modes[1:5],NA,modes[6:8])
sessioni <- rep(c("luglio","settembre"),5)
pao <- data.frame(year=c(2014,2014,2015,2015,2016,2016,2017,2017,2018,2018), sessioni=sessioni, modes=modes.dates)

ggplot(pao, aes(x=sessioni, y=modes)) + 
  geom_point(size=3, shape=21, fill="white", colour="dark red", stroke=1) +
  # scale_x_date(date_labels = sessioni) +
  facet_wrap(~year, nrow=1, shrink = TRUE) +
  # scale_x_continuous(limits=c(1, 2), breaks=c(1,2))+#, labels=c("luglio","settembre")) +
  scale_y_continuous(limits=c(0, 100)) +
  xlab("Sessione") +
  ylab("Siti occupati") +
  theme_light()
# re <- ranef(m11b)
# EBUP <- bup(re, stat="mode")
# CI <- confint(re, level=0.9)
# rbind(PAO = c(Estimate = sum(EBUP), colSums(CI)) / 130)

# browseVignettes("unmarked")
```


```{r}
pao
```

